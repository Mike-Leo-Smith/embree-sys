/* automatically generated by rust-bindgen 0.60.1 */

pub const RTC_VERSION_MAJOR: u32 = 3;
pub const RTC_VERSION_MINOR: u32 = 13;
pub const RTC_VERSION_PATCH: u32 = 4;
pub const RTC_VERSION: u32 = 31304;
pub const RTC_VERSION_STRING: &[u8; 7usize] = b"3.13.4\0";
pub const RTC_MAX_INSTANCE_LEVEL_COUNT: u32 = 1;
pub const EMBREE_MIN_WIDTH: u32 = 0;
pub const RTC_MIN_WIDTH: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const RTC_MAX_TIME_STEP_COUNT: u32 = 129;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    fn test_field___clang_max_align_nonce1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
    }
    test_field___clang_max_align_nonce1();
    fn test_field___clang_max_align_nonce2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    test_field___clang_max_align_nonce2();
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigset_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_usec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    test_field_tv_usec();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_nsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    test_field_tv_nsec();
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    fn test_field___fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(__fds_bits)
            )
        );
    }
    test_field___fds_bits();
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    fn test_field___low() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__atomic_wide_counter__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
    }
    test_field___low();
    fn test_field___high() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__atomic_wide_counter__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    test_field___high();
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    fn test_field___value64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__atomic_wide_counter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter),
                "::",
                stringify!(__value64)
            )
        );
    }
    test_field___value64();
    fn test_field___value32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__atomic_wide_counter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter),
                "::",
                stringify!(__value32)
            )
        );
    }
    test_field___value32();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    fn test_field___prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
    }
    test_field___prev();
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_slist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_slist),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    fn test_field___lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
    }
    test_field___lock();
    fn test_field___count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
    }
    test_field___count();
    fn test_field___owner() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
    }
    test_field___owner();
    fn test_field___nusers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
    }
    test_field___nusers();
    fn test_field___kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
    }
    test_field___kind();
    fn test_field___spins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
    }
    test_field___spins();
    fn test_field___elision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
    }
    test_field___elision();
    fn test_field___list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    test_field___list();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    fn test_field___readers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
    }
    test_field___readers();
    fn test_field___writers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
    }
    test_field___writers();
    fn test_field___wrphase_futex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
    }
    test_field___wrphase_futex();
    fn test_field___writers_futex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
    }
    test_field___writers_futex();
    fn test_field___pad3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
    }
    test_field___pad3();
    fn test_field___pad4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
    }
    test_field___pad4();
    fn test_field___cur_writer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
    }
    test_field___cur_writer();
    fn test_field___shared() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
    }
    test_field___shared();
    fn test_field___rwelision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
    }
    test_field___rwelision();
    fn test_field___pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
    }
    test_field___pad1();
    fn test_field___pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
    }
    test_field___pad2();
    fn test_field___flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    test_field___flags();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    fn test_field___wseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wseq)
            )
        );
    }
    test_field___wseq();
    fn test_field___g1_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_start)
            )
        );
    }
    test_field___g1_start();
    fn test_field___g_refs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
    }
    test_field___g_refs();
    fn test_field___g_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
    }
    test_field___g_size();
    fn test_field___g1_orig_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
    }
    test_field___g1_orig_size();
    fn test_field___wrefs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
    }
    test_field___wrefs();
    fn test_field___g_signals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    test_field___g_signals();
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__once_flag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__once_flag),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
pub const RTC_FORMAT_UNDEFINED: RTCFormat = 0;
pub const RTC_FORMAT_UCHAR: RTCFormat = 4097;
pub const RTC_FORMAT_UCHAR2: RTCFormat = 4098;
pub const RTC_FORMAT_UCHAR3: RTCFormat = 4099;
pub const RTC_FORMAT_UCHAR4: RTCFormat = 4100;
pub const RTC_FORMAT_CHAR: RTCFormat = 8193;
pub const RTC_FORMAT_CHAR2: RTCFormat = 8194;
pub const RTC_FORMAT_CHAR3: RTCFormat = 8195;
pub const RTC_FORMAT_CHAR4: RTCFormat = 8196;
pub const RTC_FORMAT_USHORT: RTCFormat = 12289;
pub const RTC_FORMAT_USHORT2: RTCFormat = 12290;
pub const RTC_FORMAT_USHORT3: RTCFormat = 12291;
pub const RTC_FORMAT_USHORT4: RTCFormat = 12292;
pub const RTC_FORMAT_SHORT: RTCFormat = 16385;
pub const RTC_FORMAT_SHORT2: RTCFormat = 16386;
pub const RTC_FORMAT_SHORT3: RTCFormat = 16387;
pub const RTC_FORMAT_SHORT4: RTCFormat = 16388;
pub const RTC_FORMAT_UINT: RTCFormat = 20481;
pub const RTC_FORMAT_UINT2: RTCFormat = 20482;
pub const RTC_FORMAT_UINT3: RTCFormat = 20483;
pub const RTC_FORMAT_UINT4: RTCFormat = 20484;
pub const RTC_FORMAT_INT: RTCFormat = 24577;
pub const RTC_FORMAT_INT2: RTCFormat = 24578;
pub const RTC_FORMAT_INT3: RTCFormat = 24579;
pub const RTC_FORMAT_INT4: RTCFormat = 24580;
pub const RTC_FORMAT_ULLONG: RTCFormat = 28673;
pub const RTC_FORMAT_ULLONG2: RTCFormat = 28674;
pub const RTC_FORMAT_ULLONG3: RTCFormat = 28675;
pub const RTC_FORMAT_ULLONG4: RTCFormat = 28676;
pub const RTC_FORMAT_LLONG: RTCFormat = 32769;
pub const RTC_FORMAT_LLONG2: RTCFormat = 32770;
pub const RTC_FORMAT_LLONG3: RTCFormat = 32771;
pub const RTC_FORMAT_LLONG4: RTCFormat = 32772;
pub const RTC_FORMAT_FLOAT: RTCFormat = 36865;
pub const RTC_FORMAT_FLOAT2: RTCFormat = 36866;
pub const RTC_FORMAT_FLOAT3: RTCFormat = 36867;
pub const RTC_FORMAT_FLOAT4: RTCFormat = 36868;
pub const RTC_FORMAT_FLOAT5: RTCFormat = 36869;
pub const RTC_FORMAT_FLOAT6: RTCFormat = 36870;
pub const RTC_FORMAT_FLOAT7: RTCFormat = 36871;
pub const RTC_FORMAT_FLOAT8: RTCFormat = 36872;
pub const RTC_FORMAT_FLOAT9: RTCFormat = 36873;
pub const RTC_FORMAT_FLOAT10: RTCFormat = 36874;
pub const RTC_FORMAT_FLOAT11: RTCFormat = 36875;
pub const RTC_FORMAT_FLOAT12: RTCFormat = 36876;
pub const RTC_FORMAT_FLOAT13: RTCFormat = 36877;
pub const RTC_FORMAT_FLOAT14: RTCFormat = 36878;
pub const RTC_FORMAT_FLOAT15: RTCFormat = 36879;
pub const RTC_FORMAT_FLOAT16: RTCFormat = 36880;
pub const RTC_FORMAT_FLOAT2X2_ROW_MAJOR: RTCFormat = 37154;
pub const RTC_FORMAT_FLOAT2X3_ROW_MAJOR: RTCFormat = 37155;
pub const RTC_FORMAT_FLOAT2X4_ROW_MAJOR: RTCFormat = 37156;
pub const RTC_FORMAT_FLOAT3X2_ROW_MAJOR: RTCFormat = 37170;
pub const RTC_FORMAT_FLOAT3X3_ROW_MAJOR: RTCFormat = 37171;
pub const RTC_FORMAT_FLOAT3X4_ROW_MAJOR: RTCFormat = 37172;
pub const RTC_FORMAT_FLOAT4X2_ROW_MAJOR: RTCFormat = 37186;
pub const RTC_FORMAT_FLOAT4X3_ROW_MAJOR: RTCFormat = 37187;
pub const RTC_FORMAT_FLOAT4X4_ROW_MAJOR: RTCFormat = 37188;
pub const RTC_FORMAT_FLOAT2X2_COLUMN_MAJOR: RTCFormat = 37410;
pub const RTC_FORMAT_FLOAT2X3_COLUMN_MAJOR: RTCFormat = 37411;
pub const RTC_FORMAT_FLOAT2X4_COLUMN_MAJOR: RTCFormat = 37412;
pub const RTC_FORMAT_FLOAT3X2_COLUMN_MAJOR: RTCFormat = 37426;
pub const RTC_FORMAT_FLOAT3X3_COLUMN_MAJOR: RTCFormat = 37427;
pub const RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR: RTCFormat = 37428;
pub const RTC_FORMAT_FLOAT4X2_COLUMN_MAJOR: RTCFormat = 37442;
pub const RTC_FORMAT_FLOAT4X3_COLUMN_MAJOR: RTCFormat = 37443;
pub const RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR: RTCFormat = 37444;
pub const RTC_FORMAT_GRID: RTCFormat = 40961;
pub type RTCFormat = ::std::os::raw::c_uint;
pub const RTC_BUILD_QUALITY_LOW: RTCBuildQuality = 0;
pub const RTC_BUILD_QUALITY_MEDIUM: RTCBuildQuality = 1;
pub const RTC_BUILD_QUALITY_HIGH: RTCBuildQuality = 2;
pub const RTC_BUILD_QUALITY_REFIT: RTCBuildQuality = 3;
pub type RTCBuildQuality = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCBounds {
    pub lower_x: f32,
    pub lower_y: f32,
    pub lower_z: f32,
    pub align0: f32,
    pub upper_x: f32,
    pub upper_y: f32,
    pub upper_z: f32,
    pub align1: f32,
}
#[test]
fn bindgen_test_layout_RTCBounds() {
    assert_eq!(
        ::std::mem::size_of::<RTCBounds>(),
        32usize,
        concat!("Size of: ", stringify!(RTCBounds))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCBounds>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCBounds))
    );
    fn test_field_lower_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lower_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBounds),
                "::",
                stringify!(lower_x)
            )
        );
    }
    test_field_lower_x();
    fn test_field_lower_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lower_y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBounds),
                "::",
                stringify!(lower_y)
            )
        );
    }
    test_field_lower_y();
    fn test_field_lower_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lower_z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBounds),
                "::",
                stringify!(lower_z)
            )
        );
    }
    test_field_lower_z();
    fn test_field_align0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).align0) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBounds),
                "::",
                stringify!(align0)
            )
        );
    }
    test_field_align0();
    fn test_field_upper_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).upper_x) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBounds),
                "::",
                stringify!(upper_x)
            )
        );
    }
    test_field_upper_x();
    fn test_field_upper_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).upper_y) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBounds),
                "::",
                stringify!(upper_y)
            )
        );
    }
    test_field_upper_y();
    fn test_field_upper_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).upper_z) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBounds),
                "::",
                stringify!(upper_z)
            )
        );
    }
    test_field_upper_z();
    fn test_field_align1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).align1) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBounds),
                "::",
                stringify!(align1)
            )
        );
    }
    test_field_align1();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCLinearBounds {
    pub bounds0: RTCBounds,
    pub bounds1: RTCBounds,
}
#[test]
fn bindgen_test_layout_RTCLinearBounds() {
    assert_eq!(
        ::std::mem::size_of::<RTCLinearBounds>(),
        64usize,
        concat!("Size of: ", stringify!(RTCLinearBounds))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCLinearBounds>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCLinearBounds))
    );
    fn test_field_bounds0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCLinearBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bounds0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCLinearBounds),
                "::",
                stringify!(bounds0)
            )
        );
    }
    test_field_bounds0();
    fn test_field_bounds1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCLinearBounds>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bounds1) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCLinearBounds),
                "::",
                stringify!(bounds1)
            )
        );
    }
    test_field_bounds1();
}
pub const RTC_INTERSECT_CONTEXT_FLAG_NONE: RTCIntersectContextFlags = 0;
pub const RTC_INTERSECT_CONTEXT_FLAG_INCOHERENT: RTCIntersectContextFlags = 0;
pub const RTC_INTERSECT_CONTEXT_FLAG_COHERENT: RTCIntersectContextFlags = 1;
pub type RTCIntersectContextFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCFilterFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub context: *mut RTCIntersectContext,
    pub ray: *mut RTCRayN,
    pub hit: *mut RTCHitN,
    pub N: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCFilterFunctionNArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCFilterFunctionNArguments>(),
        48usize,
        concat!("Size of: ", stringify!(RTCFilterFunctionNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCFilterFunctionNArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCFilterFunctionNArguments))
    );
    fn test_field_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCFilterFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCFilterFunctionNArguments),
                "::",
                stringify!(valid)
            )
        );
    }
    test_field_valid();
    fn test_field_geometryUserPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCFilterFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCFilterFunctionNArguments),
                "::",
                stringify!(geometryUserPtr)
            )
        );
    }
    test_field_geometryUserPtr();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCFilterFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCFilterFunctionNArguments),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_ray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCFilterFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCFilterFunctionNArguments),
                "::",
                stringify!(ray)
            )
        );
    }
    test_field_ray();
    fn test_field_hit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCFilterFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCFilterFunctionNArguments),
                "::",
                stringify!(hit)
            )
        );
    }
    test_field_hit();
    fn test_field_N() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCFilterFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCFilterFunctionNArguments),
                "::",
                stringify!(N)
            )
        );
    }
    test_field_N();
}
pub type RTCFilterFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCFilterFunctionNArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCIntersectContext {
    pub flags: RTCIntersectContextFlags,
    pub filter: RTCFilterFunctionN,
    pub instID: [::std::os::raw::c_uint; 1usize],
}
#[test]
fn bindgen_test_layout_RTCIntersectContext() {
    assert_eq!(
        ::std::mem::size_of::<RTCIntersectContext>(),
        24usize,
        concat!("Size of: ", stringify!(RTCIntersectContext))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCIntersectContext>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCIntersectContext))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectContext),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_filter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectContext),
                "::",
                stringify!(filter)
            )
        );
    }
    test_field_filter();
    fn test_field_instID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectContext),
                "::",
                stringify!(instID)
            )
        );
    }
    test_field_instID();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub time: f32,
    pub radius: f32,
}
#[test]
fn bindgen_test_layout_RTCPointQuery() {
    assert_eq!(
        ::std::mem::size_of::<RTCPointQuery>(),
        32usize,
        concat!("Size of: ", stringify!(RTCPointQuery))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQuery>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCPointQuery))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_radius() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery),
                "::",
                stringify!(radius)
            )
        );
    }
    test_field_radius();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery4 {
    pub x: [f32; 4usize],
    pub y: [f32; 4usize],
    pub z: [f32; 4usize],
    pub time: [f32; 4usize],
    pub radius: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_RTCPointQuery4() {
    assert_eq!(
        ::std::mem::size_of::<RTCPointQuery4>(),
        80usize,
        concat!("Size of: ", stringify!(RTCPointQuery4))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQuery4>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCPointQuery4))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery4),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery4),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery4),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery4),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_radius() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery4),
                "::",
                stringify!(radius)
            )
        );
    }
    test_field_radius();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery8 {
    pub x: [f32; 8usize],
    pub y: [f32; 8usize],
    pub z: [f32; 8usize],
    pub time: [f32; 8usize],
    pub radius: [f32; 8usize],
}
#[test]
fn bindgen_test_layout_RTCPointQuery8() {
    assert_eq!(
        ::std::mem::size_of::<RTCPointQuery8>(),
        160usize,
        concat!("Size of: ", stringify!(RTCPointQuery8))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQuery8>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCPointQuery8))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery8),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery8),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery8),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery8),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_radius() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery8),
                "::",
                stringify!(radius)
            )
        );
    }
    test_field_radius();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery16 {
    pub x: [f32; 16usize],
    pub y: [f32; 16usize],
    pub z: [f32; 16usize],
    pub time: [f32; 16usize],
    pub radius: [f32; 16usize],
}
#[test]
fn bindgen_test_layout_RTCPointQuery16() {
    assert_eq!(
        ::std::mem::size_of::<RTCPointQuery16>(),
        320usize,
        concat!("Size of: ", stringify!(RTCPointQuery16))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQuery16>(),
        64usize,
        concat!("Alignment of ", stringify!(RTCPointQuery16))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery16),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery16),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery16),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery16),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_radius() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQuery16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQuery16),
                "::",
                stringify!(radius)
            )
        );
    }
    test_field_radius();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQueryN {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQueryContext {
    pub world2inst: [[f32; 16usize]; 1usize],
    pub inst2world: [[f32; 16usize]; 1usize],
    pub instID: [::std::os::raw::c_uint; 1usize],
    pub instStackSize: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCPointQueryContext() {
    assert_eq!(
        ::std::mem::size_of::<RTCPointQueryContext>(),
        144usize,
        concat!("Size of: ", stringify!(RTCPointQueryContext))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQueryContext>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCPointQueryContext))
    );
    fn test_field_world2inst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).world2inst) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryContext),
                "::",
                stringify!(world2inst)
            )
        );
    }
    test_field_world2inst();
    fn test_field_inst2world() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inst2world) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryContext),
                "::",
                stringify!(inst2world)
            )
        );
    }
    test_field_inst2world();
    fn test_field_instID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryContext),
                "::",
                stringify!(instID)
            )
        );
    }
    test_field_instID();
    fn test_field_instStackSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instStackSize) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryContext),
                "::",
                stringify!(instStackSize)
            )
        );
    }
    test_field_instStackSize();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQueryFunctionArguments {
    pub query: *mut RTCPointQuery,
    pub userPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
    pub context: *mut RTCPointQueryContext,
    pub similarityScale: f32,
}
#[test]
fn bindgen_test_layout_RTCPointQueryFunctionArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCPointQueryFunctionArguments>(),
        48usize,
        concat!("Size of: ", stringify!(RTCPointQueryFunctionArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQueryFunctionArguments>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCPointQueryFunctionArguments))
    );
    fn test_field_query() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryFunctionArguments),
                "::",
                stringify!(query)
            )
        );
    }
    test_field_query();
    fn test_field_userPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userPtr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryFunctionArguments),
                "::",
                stringify!(userPtr)
            )
        );
    }
    test_field_userPtr();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryFunctionArguments),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryFunctionArguments),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryFunctionArguments),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_similarityScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCPointQueryFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).similarityScale) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCPointQueryFunctionArguments),
                "::",
                stringify!(similarityScale)
            )
        );
    }
    test_field_similarityScale();
}
pub type RTCPointQueryFunction =
    ::std::option::Option<unsafe extern "C" fn(args: *mut RTCPointQueryFunctionArguments) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCDeviceTy {
    _unused: [u8; 0],
}
pub type RTCDevice = *mut RTCDeviceTy;
extern "C" {
    pub fn rtcNewDevice(config: *const ::std::os::raw::c_char) -> RTCDevice;
}
extern "C" {
    pub fn rtcRetainDevice(device: RTCDevice);
}
extern "C" {
    pub fn rtcReleaseDevice(device: RTCDevice);
}
pub const RTC_DEVICE_PROPERTY_VERSION: RTCDeviceProperty = 0;
pub const RTC_DEVICE_PROPERTY_VERSION_MAJOR: RTCDeviceProperty = 1;
pub const RTC_DEVICE_PROPERTY_VERSION_MINOR: RTCDeviceProperty = 2;
pub const RTC_DEVICE_PROPERTY_VERSION_PATCH: RTCDeviceProperty = 3;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY4_SUPPORTED: RTCDeviceProperty = 32;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY8_SUPPORTED: RTCDeviceProperty = 33;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY16_SUPPORTED: RTCDeviceProperty = 34;
pub const RTC_DEVICE_PROPERTY_RAY_STREAM_SUPPORTED: RTCDeviceProperty = 35;
pub const RTC_DEVICE_PROPERTY_BACKFACE_CULLING_CURVES_ENABLED: RTCDeviceProperty = 63;
pub const RTC_DEVICE_PROPERTY_RAY_MASK_SUPPORTED: RTCDeviceProperty = 64;
pub const RTC_DEVICE_PROPERTY_BACKFACE_CULLING_ENABLED: RTCDeviceProperty = 65;
pub const RTC_DEVICE_PROPERTY_FILTER_FUNCTION_SUPPORTED: RTCDeviceProperty = 66;
pub const RTC_DEVICE_PROPERTY_IGNORE_INVALID_RAYS_ENABLED: RTCDeviceProperty = 67;
pub const RTC_DEVICE_PROPERTY_COMPACT_POLYS_ENABLED: RTCDeviceProperty = 68;
pub const RTC_DEVICE_PROPERTY_TRIANGLE_GEOMETRY_SUPPORTED: RTCDeviceProperty = 96;
pub const RTC_DEVICE_PROPERTY_QUAD_GEOMETRY_SUPPORTED: RTCDeviceProperty = 97;
pub const RTC_DEVICE_PROPERTY_SUBDIVISION_GEOMETRY_SUPPORTED: RTCDeviceProperty = 98;
pub const RTC_DEVICE_PROPERTY_CURVE_GEOMETRY_SUPPORTED: RTCDeviceProperty = 99;
pub const RTC_DEVICE_PROPERTY_USER_GEOMETRY_SUPPORTED: RTCDeviceProperty = 100;
pub const RTC_DEVICE_PROPERTY_POINT_GEOMETRY_SUPPORTED: RTCDeviceProperty = 101;
pub const RTC_DEVICE_PROPERTY_TASKING_SYSTEM: RTCDeviceProperty = 128;
pub const RTC_DEVICE_PROPERTY_JOIN_COMMIT_SUPPORTED: RTCDeviceProperty = 129;
pub const RTC_DEVICE_PROPERTY_PARALLEL_COMMIT_SUPPORTED: RTCDeviceProperty = 130;
pub type RTCDeviceProperty = ::std::os::raw::c_uint;
extern "C" {
    pub fn rtcGetDeviceProperty(device: RTCDevice, prop: RTCDeviceProperty) -> ssize_t;
}
extern "C" {
    pub fn rtcSetDeviceProperty(device: RTCDevice, prop: RTCDeviceProperty, value: ssize_t);
}
pub const RTC_ERROR_NONE: RTCError = 0;
pub const RTC_ERROR_UNKNOWN: RTCError = 1;
pub const RTC_ERROR_INVALID_ARGUMENT: RTCError = 2;
pub const RTC_ERROR_INVALID_OPERATION: RTCError = 3;
pub const RTC_ERROR_OUT_OF_MEMORY: RTCError = 4;
pub const RTC_ERROR_UNSUPPORTED_CPU: RTCError = 5;
pub const RTC_ERROR_CANCELLED: RTCError = 6;
pub type RTCError = ::std::os::raw::c_uint;
extern "C" {
    pub fn rtcGetDeviceError(device: RTCDevice) -> RTCError;
}
pub type RTCErrorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        userPtr: *mut ::std::os::raw::c_void,
        code: RTCError,
        str_: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn rtcSetDeviceErrorFunction(
        device: RTCDevice,
        error: RTCErrorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
pub type RTCMemoryMonitorFunction = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, bytes: ssize_t, post: bool) -> bool,
>;
extern "C" {
    pub fn rtcSetDeviceMemoryMonitorFunction(
        device: RTCDevice,
        memoryMonitor: RTCMemoryMonitorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
pub const RTC_BUFFER_TYPE_INDEX: RTCBufferType = 0;
pub const RTC_BUFFER_TYPE_VERTEX: RTCBufferType = 1;
pub const RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE: RTCBufferType = 2;
pub const RTC_BUFFER_TYPE_NORMAL: RTCBufferType = 3;
pub const RTC_BUFFER_TYPE_TANGENT: RTCBufferType = 4;
pub const RTC_BUFFER_TYPE_NORMAL_DERIVATIVE: RTCBufferType = 5;
pub const RTC_BUFFER_TYPE_GRID: RTCBufferType = 8;
pub const RTC_BUFFER_TYPE_FACE: RTCBufferType = 16;
pub const RTC_BUFFER_TYPE_LEVEL: RTCBufferType = 17;
pub const RTC_BUFFER_TYPE_EDGE_CREASE_INDEX: RTCBufferType = 18;
pub const RTC_BUFFER_TYPE_EDGE_CREASE_WEIGHT: RTCBufferType = 19;
pub const RTC_BUFFER_TYPE_VERTEX_CREASE_INDEX: RTCBufferType = 20;
pub const RTC_BUFFER_TYPE_VERTEX_CREASE_WEIGHT: RTCBufferType = 21;
pub const RTC_BUFFER_TYPE_HOLE: RTCBufferType = 22;
pub const RTC_BUFFER_TYPE_FLAGS: RTCBufferType = 32;
pub type RTCBufferType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBufferTy {
    _unused: [u8; 0],
}
pub type RTCBuffer = *mut RTCBufferTy;
extern "C" {
    pub fn rtcNewBuffer(device: RTCDevice, byteSize: size_t) -> RTCBuffer;
}
extern "C" {
    pub fn rtcNewSharedBuffer(
        device: RTCDevice,
        ptr: *mut ::std::os::raw::c_void,
        byteSize: size_t,
    ) -> RTCBuffer;
}
extern "C" {
    pub fn rtcGetBufferData(buffer: RTCBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcRetainBuffer(buffer: RTCBuffer);
}
extern "C" {
    pub fn rtcReleaseBuffer(buffer: RTCBuffer);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay {
    pub org_x: f32,
    pub org_y: f32,
    pub org_z: f32,
    pub tnear: f32,
    pub dir_x: f32,
    pub dir_y: f32,
    pub dir_z: f32,
    pub time: f32,
    pub tfar: f32,
    pub mask: ::std::os::raw::c_uint,
    pub id: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCRay() {
    assert_eq!(
        ::std::mem::size_of::<RTCRay>(),
        48usize,
        concat!("Size of: ", stringify!(RTCRay))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRay>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCRay))
    );
    fn test_field_org_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(org_x)
            )
        );
    }
    test_field_org_x();
    fn test_field_org_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(org_y)
            )
        );
    }
    test_field_org_y();
    fn test_field_org_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(org_z)
            )
        );
    }
    test_field_org_z();
    fn test_field_tnear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(tnear)
            )
        );
    }
    test_field_tnear();
    fn test_field_dir_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(dir_x)
            )
        );
    }
    test_field_dir_x();
    fn test_field_dir_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(dir_y)
            )
        );
    }
    test_field_dir_y();
    fn test_field_dir_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(dir_z)
            )
        );
    }
    test_field_dir_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_tfar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(tfar)
            )
        );
    }
    test_field_tfar();
    fn test_field_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(mask)
            )
        );
    }
    test_field_mask();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit {
    pub Ng_x: f32,
    pub Ng_y: f32,
    pub Ng_z: f32,
    pub u: f32,
    pub v: f32,
    pub primID: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
    pub instID: [::std::os::raw::c_uint; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHit() {
    assert_eq!(
        ::std::mem::size_of::<RTCHit>(),
        32usize,
        concat!("Size of: ", stringify!(RTCHit))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHit>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCHit))
    );
    fn test_field_Ng_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit),
                "::",
                stringify!(Ng_x)
            )
        );
    }
    test_field_Ng_x();
    fn test_field_Ng_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit),
                "::",
                stringify!(Ng_y)
            )
        );
    }
    test_field_Ng_y();
    fn test_field_Ng_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit),
                "::",
                stringify!(Ng_z)
            )
        );
    }
    test_field_Ng_z();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            12usize,
            concat!("Offset of field: ", stringify!(RTCHit), "::", stringify!(u))
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(RTCHit), "::", stringify!(v))
        );
    }
    test_field_v();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
    fn test_field_instID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit),
                "::",
                stringify!(instID)
            )
        );
    }
    test_field_instID();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit {
    pub ray: RTCRay,
    pub hit: RTCHit,
}
#[test]
fn bindgen_test_layout_RTCRayHit() {
    assert_eq!(
        ::std::mem::size_of::<RTCRayHit>(),
        80usize,
        concat!("Size of: ", stringify!(RTCRayHit))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHit>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCRayHit))
    );
    fn test_field_ray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHit),
                "::",
                stringify!(ray)
            )
        );
    }
    test_field_ray();
    fn test_field_hit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHit>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHit),
                "::",
                stringify!(hit)
            )
        );
    }
    test_field_hit();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay4 {
    pub org_x: [f32; 4usize],
    pub org_y: [f32; 4usize],
    pub org_z: [f32; 4usize],
    pub tnear: [f32; 4usize],
    pub dir_x: [f32; 4usize],
    pub dir_y: [f32; 4usize],
    pub dir_z: [f32; 4usize],
    pub time: [f32; 4usize],
    pub tfar: [f32; 4usize],
    pub mask: [::std::os::raw::c_uint; 4usize],
    pub id: [::std::os::raw::c_uint; 4usize],
    pub flags: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_RTCRay4() {
    assert_eq!(
        ::std::mem::size_of::<RTCRay4>(),
        192usize,
        concat!("Size of: ", stringify!(RTCRay4))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRay4>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCRay4))
    );
    fn test_field_org_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(org_x)
            )
        );
    }
    test_field_org_x();
    fn test_field_org_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(org_y)
            )
        );
    }
    test_field_org_y();
    fn test_field_org_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(org_z)
            )
        );
    }
    test_field_org_z();
    fn test_field_tnear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(tnear)
            )
        );
    }
    test_field_tnear();
    fn test_field_dir_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(dir_x)
            )
        );
    }
    test_field_dir_x();
    fn test_field_dir_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(dir_y)
            )
        );
    }
    test_field_dir_y();
    fn test_field_dir_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(dir_z)
            )
        );
    }
    test_field_dir_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_tfar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(tfar)
            )
        );
    }
    test_field_tfar();
    fn test_field_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(mask)
            )
        );
    }
    test_field_mask();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay4),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit4 {
    pub Ng_x: [f32; 4usize],
    pub Ng_y: [f32; 4usize],
    pub Ng_z: [f32; 4usize],
    pub u: [f32; 4usize],
    pub v: [f32; 4usize],
    pub primID: [::std::os::raw::c_uint; 4usize],
    pub geomID: [::std::os::raw::c_uint; 4usize],
    pub instID: [[::std::os::raw::c_uint; 4usize]; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHit4() {
    assert_eq!(
        ::std::mem::size_of::<RTCHit4>(),
        128usize,
        concat!("Size of: ", stringify!(RTCHit4))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHit4>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCHit4))
    );
    fn test_field_Ng_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit4),
                "::",
                stringify!(Ng_x)
            )
        );
    }
    test_field_Ng_x();
    fn test_field_Ng_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit4),
                "::",
                stringify!(Ng_y)
            )
        );
    }
    test_field_Ng_y();
    fn test_field_Ng_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit4),
                "::",
                stringify!(Ng_z)
            )
        );
    }
    test_field_Ng_z();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit4),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit4),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit4),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit4),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
    fn test_field_instID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit4),
                "::",
                stringify!(instID)
            )
        );
    }
    test_field_instID();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit4 {
    pub ray: RTCRay4,
    pub hit: RTCHit4,
}
#[test]
fn bindgen_test_layout_RTCRayHit4() {
    assert_eq!(
        ::std::mem::size_of::<RTCRayHit4>(),
        320usize,
        concat!("Size of: ", stringify!(RTCRayHit4))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHit4>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCRayHit4))
    );
    fn test_field_ray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHit4),
                "::",
                stringify!(ray)
            )
        );
    }
    test_field_ray();
    fn test_field_hit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHit4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHit4),
                "::",
                stringify!(hit)
            )
        );
    }
    test_field_hit();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay8 {
    pub org_x: [f32; 8usize],
    pub org_y: [f32; 8usize],
    pub org_z: [f32; 8usize],
    pub tnear: [f32; 8usize],
    pub dir_x: [f32; 8usize],
    pub dir_y: [f32; 8usize],
    pub dir_z: [f32; 8usize],
    pub time: [f32; 8usize],
    pub tfar: [f32; 8usize],
    pub mask: [::std::os::raw::c_uint; 8usize],
    pub id: [::std::os::raw::c_uint; 8usize],
    pub flags: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout_RTCRay8() {
    assert_eq!(
        ::std::mem::size_of::<RTCRay8>(),
        384usize,
        concat!("Size of: ", stringify!(RTCRay8))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRay8>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCRay8))
    );
    fn test_field_org_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(org_x)
            )
        );
    }
    test_field_org_x();
    fn test_field_org_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(org_y)
            )
        );
    }
    test_field_org_y();
    fn test_field_org_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(org_z)
            )
        );
    }
    test_field_org_z();
    fn test_field_tnear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(tnear)
            )
        );
    }
    test_field_tnear();
    fn test_field_dir_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(dir_x)
            )
        );
    }
    test_field_dir_x();
    fn test_field_dir_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(dir_y)
            )
        );
    }
    test_field_dir_y();
    fn test_field_dir_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(dir_z)
            )
        );
    }
    test_field_dir_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_tfar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(tfar)
            )
        );
    }
    test_field_tfar();
    fn test_field_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(mask)
            )
        );
    }
    test_field_mask();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay8),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit8 {
    pub Ng_x: [f32; 8usize],
    pub Ng_y: [f32; 8usize],
    pub Ng_z: [f32; 8usize],
    pub u: [f32; 8usize],
    pub v: [f32; 8usize],
    pub primID: [::std::os::raw::c_uint; 8usize],
    pub geomID: [::std::os::raw::c_uint; 8usize],
    pub instID: [[::std::os::raw::c_uint; 8usize]; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHit8() {
    assert_eq!(
        ::std::mem::size_of::<RTCHit8>(),
        256usize,
        concat!("Size of: ", stringify!(RTCHit8))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHit8>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCHit8))
    );
    fn test_field_Ng_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit8),
                "::",
                stringify!(Ng_x)
            )
        );
    }
    test_field_Ng_x();
    fn test_field_Ng_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit8),
                "::",
                stringify!(Ng_y)
            )
        );
    }
    test_field_Ng_y();
    fn test_field_Ng_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit8),
                "::",
                stringify!(Ng_z)
            )
        );
    }
    test_field_Ng_z();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit8),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit8),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit8),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit8),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
    fn test_field_instID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit8),
                "::",
                stringify!(instID)
            )
        );
    }
    test_field_instID();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit8 {
    pub ray: RTCRay8,
    pub hit: RTCHit8,
}
#[test]
fn bindgen_test_layout_RTCRayHit8() {
    assert_eq!(
        ::std::mem::size_of::<RTCRayHit8>(),
        640usize,
        concat!("Size of: ", stringify!(RTCRayHit8))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHit8>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCRayHit8))
    );
    fn test_field_ray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHit8),
                "::",
                stringify!(ray)
            )
        );
    }
    test_field_ray();
    fn test_field_hit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHit8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHit8),
                "::",
                stringify!(hit)
            )
        );
    }
    test_field_hit();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay16 {
    pub org_x: [f32; 16usize],
    pub org_y: [f32; 16usize],
    pub org_z: [f32; 16usize],
    pub tnear: [f32; 16usize],
    pub dir_x: [f32; 16usize],
    pub dir_y: [f32; 16usize],
    pub dir_z: [f32; 16usize],
    pub time: [f32; 16usize],
    pub tfar: [f32; 16usize],
    pub mask: [::std::os::raw::c_uint; 16usize],
    pub id: [::std::os::raw::c_uint; 16usize],
    pub flags: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout_RTCRay16() {
    assert_eq!(
        ::std::mem::size_of::<RTCRay16>(),
        768usize,
        concat!("Size of: ", stringify!(RTCRay16))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRay16>(),
        64usize,
        concat!("Alignment of ", stringify!(RTCRay16))
    );
    fn test_field_org_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(org_x)
            )
        );
    }
    test_field_org_x();
    fn test_field_org_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(org_y)
            )
        );
    }
    test_field_org_y();
    fn test_field_org_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(org_z)
            )
        );
    }
    test_field_org_z();
    fn test_field_tnear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(tnear)
            )
        );
    }
    test_field_tnear();
    fn test_field_dir_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(dir_x)
            )
        );
    }
    test_field_dir_x();
    fn test_field_dir_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(dir_y)
            )
        );
    }
    test_field_dir_y();
    fn test_field_dir_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(dir_z)
            )
        );
    }
    test_field_dir_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_tfar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(tfar)
            )
        );
    }
    test_field_tfar();
    fn test_field_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(mask)
            )
        );
    }
    test_field_mask();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRay16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRay16),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit16 {
    pub Ng_x: [f32; 16usize],
    pub Ng_y: [f32; 16usize],
    pub Ng_z: [f32; 16usize],
    pub u: [f32; 16usize],
    pub v: [f32; 16usize],
    pub primID: [::std::os::raw::c_uint; 16usize],
    pub geomID: [::std::os::raw::c_uint; 16usize],
    pub instID: [[::std::os::raw::c_uint; 16usize]; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHit16() {
    assert_eq!(
        ::std::mem::size_of::<RTCHit16>(),
        512usize,
        concat!("Size of: ", stringify!(RTCHit16))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHit16>(),
        64usize,
        concat!("Alignment of ", stringify!(RTCHit16))
    );
    fn test_field_Ng_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit16),
                "::",
                stringify!(Ng_x)
            )
        );
    }
    test_field_Ng_x();
    fn test_field_Ng_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit16),
                "::",
                stringify!(Ng_y)
            )
        );
    }
    test_field_Ng_y();
    fn test_field_Ng_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit16),
                "::",
                stringify!(Ng_z)
            )
        );
    }
    test_field_Ng_z();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit16),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit16),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit16),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit16),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
    fn test_field_instID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHit16),
                "::",
                stringify!(instID)
            )
        );
    }
    test_field_instID();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit16 {
    pub ray: RTCRay16,
    pub hit: RTCHit16,
}
#[test]
fn bindgen_test_layout_RTCRayHit16() {
    assert_eq!(
        ::std::mem::size_of::<RTCRayHit16>(),
        1280usize,
        concat!("Size of: ", stringify!(RTCRayHit16))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHit16>(),
        64usize,
        concat!("Alignment of ", stringify!(RTCRayHit16))
    );
    fn test_field_ray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHit16),
                "::",
                stringify!(ray)
            )
        );
    }
    test_field_ray();
    fn test_field_hit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHit16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize
            },
            768usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHit16),
                "::",
                stringify!(hit)
            )
        );
    }
    test_field_hit();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayNp {
    pub org_x: *mut f32,
    pub org_y: *mut f32,
    pub org_z: *mut f32,
    pub tnear: *mut f32,
    pub dir_x: *mut f32,
    pub dir_y: *mut f32,
    pub dir_z: *mut f32,
    pub time: *mut f32,
    pub tfar: *mut f32,
    pub mask: *mut ::std::os::raw::c_uint,
    pub id: *mut ::std::os::raw::c_uint,
    pub flags: *mut ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCRayNp() {
    assert_eq!(
        ::std::mem::size_of::<RTCRayNp>(),
        96usize,
        concat!("Size of: ", stringify!(RTCRayNp))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayNp>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCRayNp))
    );
    fn test_field_org_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(org_x)
            )
        );
    }
    test_field_org_x();
    fn test_field_org_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(org_y)
            )
        );
    }
    test_field_org_y();
    fn test_field_org_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(org_z)
            )
        );
    }
    test_field_org_z();
    fn test_field_tnear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(tnear)
            )
        );
    }
    test_field_tnear();
    fn test_field_dir_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(dir_x)
            )
        );
    }
    test_field_dir_x();
    fn test_field_dir_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(dir_y)
            )
        );
    }
    test_field_dir_y();
    fn test_field_dir_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(dir_z)
            )
        );
    }
    test_field_dir_z();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_tfar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(tfar)
            )
        );
    }
    test_field_tfar();
    fn test_field_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(mask)
            )
        );
    }
    test_field_mask();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayNp),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCHitNp {
    pub Ng_x: *mut f32,
    pub Ng_y: *mut f32,
    pub Ng_z: *mut f32,
    pub u: *mut f32,
    pub v: *mut f32,
    pub primID: *mut ::std::os::raw::c_uint,
    pub geomID: *mut ::std::os::raw::c_uint,
    pub instID: [*mut ::std::os::raw::c_uint; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHitNp() {
    assert_eq!(
        ::std::mem::size_of::<RTCHitNp>(),
        64usize,
        concat!("Size of: ", stringify!(RTCHitNp))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHitNp>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCHitNp))
    );
    fn test_field_Ng_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHitNp),
                "::",
                stringify!(Ng_x)
            )
        );
    }
    test_field_Ng_x();
    fn test_field_Ng_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHitNp),
                "::",
                stringify!(Ng_y)
            )
        );
    }
    test_field_Ng_y();
    fn test_field_Ng_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHitNp),
                "::",
                stringify!(Ng_z)
            )
        );
    }
    test_field_Ng_z();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHitNp),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHitNp),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHitNp),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHitNp),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
    fn test_field_instID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCHitNp),
                "::",
                stringify!(instID)
            )
        );
    }
    test_field_instID();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHitNp {
    pub ray: RTCRayNp,
    pub hit: RTCHitNp,
}
#[test]
fn bindgen_test_layout_RTCRayHitNp() {
    assert_eq!(
        ::std::mem::size_of::<RTCRayHitNp>(),
        160usize,
        concat!("Size of: ", stringify!(RTCRayHitNp))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHitNp>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCRayHitNp))
    );
    fn test_field_ray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHitNp),
                "::",
                stringify!(ray)
            )
        );
    }
    test_field_ray();
    fn test_field_hit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCRayHitNp>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCRayHitNp),
                "::",
                stringify!(hit)
            )
        );
    }
    test_field_hit();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayN {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCHitN {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHitN {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCQuaternionDecomposition {
    pub scale_x: f32,
    pub scale_y: f32,
    pub scale_z: f32,
    pub skew_xy: f32,
    pub skew_xz: f32,
    pub skew_yz: f32,
    pub shift_x: f32,
    pub shift_y: f32,
    pub shift_z: f32,
    pub quaternion_r: f32,
    pub quaternion_i: f32,
    pub quaternion_j: f32,
    pub quaternion_k: f32,
    pub translation_x: f32,
    pub translation_y: f32,
    pub translation_z: f32,
}
#[test]
fn bindgen_test_layout_RTCQuaternionDecomposition() {
    assert_eq!(
        ::std::mem::size_of::<RTCQuaternionDecomposition>(),
        64usize,
        concat!("Size of: ", stringify!(RTCQuaternionDecomposition))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCQuaternionDecomposition>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCQuaternionDecomposition))
    );
    fn test_field_scale_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(scale_x)
            )
        );
    }
    test_field_scale_x();
    fn test_field_scale_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale_y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(scale_y)
            )
        );
    }
    test_field_scale_y();
    fn test_field_scale_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale_z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(scale_z)
            )
        );
    }
    test_field_scale_z();
    fn test_field_skew_xy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skew_xy) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(skew_xy)
            )
        );
    }
    test_field_skew_xy();
    fn test_field_skew_xz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skew_xz) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(skew_xz)
            )
        );
    }
    test_field_skew_xz();
    fn test_field_skew_yz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skew_yz) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(skew_yz)
            )
        );
    }
    test_field_skew_yz();
    fn test_field_shift_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shift_x) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(shift_x)
            )
        );
    }
    test_field_shift_x();
    fn test_field_shift_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shift_y) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(shift_y)
            )
        );
    }
    test_field_shift_y();
    fn test_field_shift_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shift_z) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(shift_z)
            )
        );
    }
    test_field_shift_z();
    fn test_field_quaternion_r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quaternion_r) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(quaternion_r)
            )
        );
    }
    test_field_quaternion_r();
    fn test_field_quaternion_i() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quaternion_i) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(quaternion_i)
            )
        );
    }
    test_field_quaternion_i();
    fn test_field_quaternion_j() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quaternion_j) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(quaternion_j)
            )
        );
    }
    test_field_quaternion_j();
    fn test_field_quaternion_k() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quaternion_k) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(quaternion_k)
            )
        );
    }
    test_field_quaternion_k();
    fn test_field_translation_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).translation_x) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(translation_x)
            )
        );
    }
    test_field_translation_x();
    fn test_field_translation_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).translation_y) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(translation_y)
            )
        );
    }
    test_field_translation_y();
    fn test_field_translation_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCQuaternionDecomposition>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).translation_z) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCQuaternionDecomposition),
                "::",
                stringify!(translation_z)
            )
        );
    }
    test_field_translation_z();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCSceneTy {
    _unused: [u8; 0],
}
pub type RTCScene = *mut RTCSceneTy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCGeometryTy {
    _unused: [u8; 0],
}
pub type RTCGeometry = *mut RTCGeometryTy;
pub const RTC_GEOMETRY_TYPE_TRIANGLE: RTCGeometryType = 0;
pub const RTC_GEOMETRY_TYPE_QUAD: RTCGeometryType = 1;
pub const RTC_GEOMETRY_TYPE_GRID: RTCGeometryType = 2;
pub const RTC_GEOMETRY_TYPE_SUBDIVISION: RTCGeometryType = 8;
pub const RTC_GEOMETRY_TYPE_CONE_LINEAR_CURVE: RTCGeometryType = 15;
pub const RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE: RTCGeometryType = 16;
pub const RTC_GEOMETRY_TYPE_FLAT_LINEAR_CURVE: RTCGeometryType = 17;
pub const RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE: RTCGeometryType = 24;
pub const RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE: RTCGeometryType = 25;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BEZIER_CURVE: RTCGeometryType = 26;
pub const RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE: RTCGeometryType = 32;
pub const RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE: RTCGeometryType = 33;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BSPLINE_CURVE: RTCGeometryType = 34;
pub const RTC_GEOMETRY_TYPE_ROUND_HERMITE_CURVE: RTCGeometryType = 40;
pub const RTC_GEOMETRY_TYPE_FLAT_HERMITE_CURVE: RTCGeometryType = 41;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_HERMITE_CURVE: RTCGeometryType = 42;
pub const RTC_GEOMETRY_TYPE_SPHERE_POINT: RTCGeometryType = 50;
pub const RTC_GEOMETRY_TYPE_DISC_POINT: RTCGeometryType = 51;
pub const RTC_GEOMETRY_TYPE_ORIENTED_DISC_POINT: RTCGeometryType = 52;
pub const RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE: RTCGeometryType = 58;
pub const RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE: RTCGeometryType = 59;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_CATMULL_ROM_CURVE: RTCGeometryType = 60;
pub const RTC_GEOMETRY_TYPE_USER: RTCGeometryType = 120;
pub const RTC_GEOMETRY_TYPE_INSTANCE: RTCGeometryType = 121;
pub type RTCGeometryType = ::std::os::raw::c_uint;
pub const RTC_SUBDIVISION_MODE_NO_BOUNDARY: RTCSubdivisionMode = 0;
pub const RTC_SUBDIVISION_MODE_SMOOTH_BOUNDARY: RTCSubdivisionMode = 1;
pub const RTC_SUBDIVISION_MODE_PIN_CORNERS: RTCSubdivisionMode = 2;
pub const RTC_SUBDIVISION_MODE_PIN_BOUNDARY: RTCSubdivisionMode = 3;
pub const RTC_SUBDIVISION_MODE_PIN_ALL: RTCSubdivisionMode = 4;
pub type RTCSubdivisionMode = ::std::os::raw::c_uint;
pub const RTC_CURVE_FLAG_NEIGHBOR_LEFT: RTCCurveFlags = 1;
pub const RTC_CURVE_FLAG_NEIGHBOR_RIGHT: RTCCurveFlags = 2;
pub type RTCCurveFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBoundsFunctionArguments {
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub timeStep: ::std::os::raw::c_uint,
    pub bounds_o: *mut RTCBounds,
}
#[test]
fn bindgen_test_layout_RTCBoundsFunctionArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCBoundsFunctionArguments>(),
        24usize,
        concat!("Size of: ", stringify!(RTCBoundsFunctionArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCBoundsFunctionArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCBoundsFunctionArguments))
    );
    fn test_field_geometryUserPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBoundsFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBoundsFunctionArguments),
                "::",
                stringify!(geometryUserPtr)
            )
        );
    }
    test_field_geometryUserPtr();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBoundsFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBoundsFunctionArguments),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_timeStep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBoundsFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeStep) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBoundsFunctionArguments),
                "::",
                stringify!(timeStep)
            )
        );
    }
    test_field_timeStep();
    fn test_field_bounds_o() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBoundsFunctionArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bounds_o) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBoundsFunctionArguments),
                "::",
                stringify!(bounds_o)
            )
        );
    }
    test_field_bounds_o();
}
pub type RTCBoundsFunction =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCBoundsFunctionArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCIntersectFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub context: *mut RTCIntersectContext,
    pub rayhit: *mut RTCRayHitN,
    pub N: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCIntersectFunctionNArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCIntersectFunctionNArguments>(),
        48usize,
        concat!("Size of: ", stringify!(RTCIntersectFunctionNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCIntersectFunctionNArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCIntersectFunctionNArguments))
    );
    fn test_field_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectFunctionNArguments),
                "::",
                stringify!(valid)
            )
        );
    }
    test_field_valid();
    fn test_field_geometryUserPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectFunctionNArguments),
                "::",
                stringify!(geometryUserPtr)
            )
        );
    }
    test_field_geometryUserPtr();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectFunctionNArguments),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectFunctionNArguments),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_rayhit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rayhit) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectFunctionNArguments),
                "::",
                stringify!(rayhit)
            )
        );
    }
    test_field_rayhit();
    fn test_field_N() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectFunctionNArguments),
                "::",
                stringify!(N)
            )
        );
    }
    test_field_N();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCIntersectFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCIntersectFunctionNArguments),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
}
pub type RTCIntersectFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCIntersectFunctionNArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCOccludedFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub context: *mut RTCIntersectContext,
    pub ray: *mut RTCRayN,
    pub N: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCOccludedFunctionNArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCOccludedFunctionNArguments>(),
        48usize,
        concat!("Size of: ", stringify!(RTCOccludedFunctionNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCOccludedFunctionNArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCOccludedFunctionNArguments))
    );
    fn test_field_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCOccludedFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCOccludedFunctionNArguments),
                "::",
                stringify!(valid)
            )
        );
    }
    test_field_valid();
    fn test_field_geometryUserPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCOccludedFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCOccludedFunctionNArguments),
                "::",
                stringify!(geometryUserPtr)
            )
        );
    }
    test_field_geometryUserPtr();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCOccludedFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCOccludedFunctionNArguments),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCOccludedFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCOccludedFunctionNArguments),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_ray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCOccludedFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCOccludedFunctionNArguments),
                "::",
                stringify!(ray)
            )
        );
    }
    test_field_ray();
    fn test_field_N() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCOccludedFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCOccludedFunctionNArguments),
                "::",
                stringify!(N)
            )
        );
    }
    test_field_N();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCOccludedFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCOccludedFunctionNArguments),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
}
pub type RTCOccludedFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCOccludedFunctionNArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCDisplacementFunctionNArguments {
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub geometry: RTCGeometry,
    pub primID: ::std::os::raw::c_uint,
    pub timeStep: ::std::os::raw::c_uint,
    pub u: *const f32,
    pub v: *const f32,
    pub Ng_x: *const f32,
    pub Ng_y: *const f32,
    pub Ng_z: *const f32,
    pub P_x: *mut f32,
    pub P_y: *mut f32,
    pub P_z: *mut f32,
    pub N: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCDisplacementFunctionNArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCDisplacementFunctionNArguments>(),
        96usize,
        concat!("Size of: ", stringify!(RTCDisplacementFunctionNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCDisplacementFunctionNArguments>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RTCDisplacementFunctionNArguments)
        )
    );
    fn test_field_geometryUserPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(geometryUserPtr)
            )
        );
    }
    test_field_geometryUserPtr();
    fn test_field_geometry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(geometry)
            )
        );
    }
    test_field_geometry();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_timeStep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeStep) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(timeStep)
            )
        );
    }
    test_field_timeStep();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
    fn test_field_Ng_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(Ng_x)
            )
        );
    }
    test_field_Ng_x();
    fn test_field_Ng_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(Ng_y)
            )
        );
    }
    test_field_Ng_y();
    fn test_field_Ng_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(Ng_z)
            )
        );
    }
    test_field_Ng_z();
    fn test_field_P_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).P_x) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(P_x)
            )
        );
    }
    test_field_P_x();
    fn test_field_P_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).P_y) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(P_y)
            )
        );
    }
    test_field_P_y();
    fn test_field_P_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).P_z) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(P_z)
            )
        );
    }
    test_field_P_z();
    fn test_field_N() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCDisplacementFunctionNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCDisplacementFunctionNArguments),
                "::",
                stringify!(N)
            )
        );
    }
    test_field_N();
}
pub type RTCDisplacementFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCDisplacementFunctionNArguments)>;
extern "C" {
    pub fn rtcNewGeometry(device: RTCDevice, type_: RTCGeometryType) -> RTCGeometry;
}
extern "C" {
    pub fn rtcRetainGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcReleaseGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcCommitGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcEnableGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcDisableGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcSetGeometryTimeStepCount(
        geometry: RTCGeometry,
        timeStepCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryTimeRange(geometry: RTCGeometry, startTime: f32, endTime: f32);
}
extern "C" {
    pub fn rtcSetGeometryVertexAttributeCount(
        geometry: RTCGeometry,
        vertexAttributeCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryMask(geometry: RTCGeometry, mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rtcSetGeometryBuildQuality(geometry: RTCGeometry, quality: RTCBuildQuality);
}
extern "C" {
    pub fn rtcSetGeometryMaxRadiusScale(geometry: RTCGeometry, maxRadiusScale: f32);
}
extern "C" {
    pub fn rtcSetGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        buffer: RTCBuffer,
        byteOffset: size_t,
        byteStride: size_t,
        itemCount: size_t,
    );
}
extern "C" {
    pub fn rtcSetSharedGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        ptr: *const ::std::os::raw::c_void,
        byteOffset: size_t,
        byteStride: size_t,
        itemCount: size_t,
    );
}
extern "C" {
    pub fn rtcSetNewGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        byteStride: size_t,
        itemCount: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcGetGeometryBufferData(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcUpdateGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryIntersectFilterFunction(geometry: RTCGeometry, filter: RTCFilterFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryOccludedFilterFunction(geometry: RTCGeometry, filter: RTCFilterFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryUserData(geometry: RTCGeometry, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rtcGetGeometryUserData(geometry: RTCGeometry) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcSetGeometryPointQueryFunction(
        geometry: RTCGeometry,
        pointQuery: RTCPointQueryFunction,
    );
}
extern "C" {
    pub fn rtcSetGeometryUserPrimitiveCount(
        geometry: RTCGeometry,
        userPrimitiveCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryBoundsFunction(
        geometry: RTCGeometry,
        bounds: RTCBoundsFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryIntersectFunction(geometry: RTCGeometry, intersect: RTCIntersectFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryOccludedFunction(geometry: RTCGeometry, occluded: RTCOccludedFunctionN);
}
extern "C" {
    pub fn rtcFilterIntersection(
        args: *const RTCIntersectFunctionNArguments,
        filterArgs: *const RTCFilterFunctionNArguments,
    );
}
extern "C" {
    pub fn rtcFilterOcclusion(
        args: *const RTCOccludedFunctionNArguments,
        filterArgs: *const RTCFilterFunctionNArguments,
    );
}
extern "C" {
    pub fn rtcSetGeometryInstancedScene(geometry: RTCGeometry, scene: RTCScene);
}
extern "C" {
    pub fn rtcSetGeometryTransform(
        geometry: RTCGeometry,
        timeStep: ::std::os::raw::c_uint,
        format: RTCFormat,
        xfm: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryTransformQuaternion(
        geometry: RTCGeometry,
        timeStep: ::std::os::raw::c_uint,
        qd: *const RTCQuaternionDecomposition,
    );
}
extern "C" {
    pub fn rtcGetGeometryTransform(
        geometry: RTCGeometry,
        time: f32,
        format: RTCFormat,
        xfm: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryTessellationRate(geometry: RTCGeometry, tessellationRate: f32);
}
extern "C" {
    pub fn rtcSetGeometryTopologyCount(
        geometry: RTCGeometry,
        topologyCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometrySubdivisionMode(
        geometry: RTCGeometry,
        topologyID: ::std::os::raw::c_uint,
        mode: RTCSubdivisionMode,
    );
}
extern "C" {
    pub fn rtcSetGeometryVertexAttributeTopology(
        geometry: RTCGeometry,
        vertexAttributeID: ::std::os::raw::c_uint,
        topologyID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryDisplacementFunction(
        geometry: RTCGeometry,
        displacement: RTCDisplacementFunctionN,
    );
}
extern "C" {
    pub fn rtcGetGeometryFirstHalfEdge(
        geometry: RTCGeometry,
        faceID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryFace(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryNextHalfEdge(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryPreviousHalfEdge(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryOppositeHalfEdge(
        geometry: RTCGeometry,
        topologyID: ::std::os::raw::c_uint,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCInterpolateArguments {
    pub geometry: RTCGeometry,
    pub primID: ::std::os::raw::c_uint,
    pub u: f32,
    pub v: f32,
    pub bufferType: RTCBufferType,
    pub bufferSlot: ::std::os::raw::c_uint,
    pub P: *mut f32,
    pub dPdu: *mut f32,
    pub dPdv: *mut f32,
    pub ddPdudu: *mut f32,
    pub ddPdvdv: *mut f32,
    pub ddPdudv: *mut f32,
    pub valueCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCInterpolateArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCInterpolateArguments>(),
        88usize,
        concat!("Size of: ", stringify!(RTCInterpolateArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCInterpolateArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCInterpolateArguments))
    );
    fn test_field_geometry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(geometry)
            )
        );
    }
    test_field_geometry();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
    fn test_field_bufferType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferType) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(bufferType)
            )
        );
    }
    test_field_bufferType();
    fn test_field_bufferSlot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferSlot) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(bufferSlot)
            )
        );
    }
    test_field_bufferSlot();
    fn test_field_P() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).P) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(P)
            )
        );
    }
    test_field_P();
    fn test_field_dPdu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dPdu) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(dPdu)
            )
        );
    }
    test_field_dPdu();
    fn test_field_dPdv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dPdv) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(dPdv)
            )
        );
    }
    test_field_dPdv();
    fn test_field_ddPdudu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ddPdudu) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(ddPdudu)
            )
        );
    }
    test_field_ddPdudu();
    fn test_field_ddPdvdv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ddPdvdv) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(ddPdvdv)
            )
        );
    }
    test_field_ddPdvdv();
    fn test_field_ddPdudv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ddPdudv) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(ddPdudv)
            )
        );
    }
    test_field_ddPdudv();
    fn test_field_valueCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valueCount) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateArguments),
                "::",
                stringify!(valueCount)
            )
        );
    }
    test_field_valueCount();
}
extern "C" {
    pub fn rtcInterpolate(args: *const RTCInterpolateArguments);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCInterpolateNArguments {
    pub geometry: RTCGeometry,
    pub valid: *const ::std::os::raw::c_void,
    pub primIDs: *const ::std::os::raw::c_uint,
    pub u: *const f32,
    pub v: *const f32,
    pub N: ::std::os::raw::c_uint,
    pub bufferType: RTCBufferType,
    pub bufferSlot: ::std::os::raw::c_uint,
    pub P: *mut f32,
    pub dPdu: *mut f32,
    pub dPdv: *mut f32,
    pub ddPdudu: *mut f32,
    pub ddPdvdv: *mut f32,
    pub ddPdudv: *mut f32,
    pub valueCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCInterpolateNArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCInterpolateNArguments>(),
        112usize,
        concat!("Size of: ", stringify!(RTCInterpolateNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCInterpolateNArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCInterpolateNArguments))
    );
    fn test_field_geometry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(geometry)
            )
        );
    }
    test_field_geometry();
    fn test_field_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(valid)
            )
        );
    }
    test_field_valid();
    fn test_field_primIDs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primIDs) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(primIDs)
            )
        );
    }
    test_field_primIDs();
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
    fn test_field_N() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(N)
            )
        );
    }
    test_field_N();
    fn test_field_bufferType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferType) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(bufferType)
            )
        );
    }
    test_field_bufferType();
    fn test_field_bufferSlot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bufferSlot) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(bufferSlot)
            )
        );
    }
    test_field_bufferSlot();
    fn test_field_P() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).P) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(P)
            )
        );
    }
    test_field_P();
    fn test_field_dPdu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dPdu) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(dPdu)
            )
        );
    }
    test_field_dPdu();
    fn test_field_dPdv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dPdv) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(dPdv)
            )
        );
    }
    test_field_dPdv();
    fn test_field_ddPdudu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ddPdudu) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(ddPdudu)
            )
        );
    }
    test_field_ddPdudu();
    fn test_field_ddPdvdv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ddPdvdv) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(ddPdvdv)
            )
        );
    }
    test_field_ddPdvdv();
    fn test_field_ddPdudv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ddPdudv) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(ddPdudv)
            )
        );
    }
    test_field_ddPdudv();
    fn test_field_valueCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCInterpolateNArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valueCount) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCInterpolateNArguments),
                "::",
                stringify!(valueCount)
            )
        );
    }
    test_field_valueCount();
}
extern "C" {
    pub fn rtcInterpolateN(args: *const RTCInterpolateNArguments);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCGrid {
    pub startVertexID: ::std::os::raw::c_uint,
    pub stride: ::std::os::raw::c_uint,
    pub width: ::std::os::raw::c_ushort,
    pub height: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_RTCGrid() {
    assert_eq!(
        ::std::mem::size_of::<RTCGrid>(),
        12usize,
        concat!("Size of: ", stringify!(RTCGrid))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCGrid>(),
        4usize,
        concat!("Alignment of ", stringify!(RTCGrid))
    );
    fn test_field_startVertexID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCGrid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).startVertexID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCGrid),
                "::",
                stringify!(startVertexID)
            )
        );
    }
    test_field_startVertexID();
    fn test_field_stride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCGrid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCGrid),
                "::",
                stringify!(stride)
            )
        );
    }
    test_field_stride();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCGrid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCGrid),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCGrid>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCGrid),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
}
pub const RTC_SCENE_FLAG_NONE: RTCSceneFlags = 0;
pub const RTC_SCENE_FLAG_DYNAMIC: RTCSceneFlags = 1;
pub const RTC_SCENE_FLAG_COMPACT: RTCSceneFlags = 2;
pub const RTC_SCENE_FLAG_ROBUST: RTCSceneFlags = 4;
pub const RTC_SCENE_FLAG_CONTEXT_FILTER_FUNCTION: RTCSceneFlags = 8;
pub type RTCSceneFlags = ::std::os::raw::c_uint;
extern "C" {
    pub fn rtcNewScene(device: RTCDevice) -> RTCScene;
}
extern "C" {
    pub fn rtcGetSceneDevice(hscene: RTCScene) -> RTCDevice;
}
extern "C" {
    pub fn rtcRetainScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcReleaseScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcAttachGeometry(scene: RTCScene, geometry: RTCGeometry) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcAttachGeometryByID(
        scene: RTCScene,
        geometry: RTCGeometry,
        geomID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcDetachGeometry(scene: RTCScene, geomID: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rtcGetGeometry(scene: RTCScene, geomID: ::std::os::raw::c_uint) -> RTCGeometry;
}
extern "C" {
    pub fn rtcGetGeometryThreadSafe(scene: RTCScene, geomID: ::std::os::raw::c_uint)
        -> RTCGeometry;
}
extern "C" {
    pub fn rtcCommitScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcJoinCommitScene(scene: RTCScene);
}
pub type RTCProgressMonitorFunction =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, n: f64) -> bool>;
extern "C" {
    pub fn rtcSetSceneProgressMonitorFunction(
        scene: RTCScene,
        progress: RTCProgressMonitorFunction,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetSceneBuildQuality(scene: RTCScene, quality: RTCBuildQuality);
}
extern "C" {
    pub fn rtcSetSceneFlags(scene: RTCScene, flags: RTCSceneFlags);
}
extern "C" {
    pub fn rtcGetSceneFlags(scene: RTCScene) -> RTCSceneFlags;
}
extern "C" {
    pub fn rtcGetSceneBounds(scene: RTCScene, bounds_o: *mut RTCBounds);
}
extern "C" {
    pub fn rtcGetSceneLinearBounds(scene: RTCScene, bounds_o: *mut RTCLinearBounds);
}
extern "C" {
    pub fn rtcPointQuery(
        scene: RTCScene,
        query: *mut RTCPointQuery,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery4,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery8,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery16,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcIntersect1(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit,
    );
}
extern "C" {
    pub fn rtcIntersect4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit4,
    );
}
extern "C" {
    pub fn rtcIntersect8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit8,
    );
}
extern "C" {
    pub fn rtcIntersect16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit16,
    );
}
extern "C" {
    pub fn rtcIntersect1M(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHit,
        M: ::std::os::raw::c_uint,
        byteStride: size_t,
    );
}
extern "C" {
    pub fn rtcIntersect1Mp(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut *mut RTCRayHit,
        M: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcIntersectNM(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *mut RTCRayHitN,
        N: ::std::os::raw::c_uint,
        M: ::std::os::raw::c_uint,
        byteStride: size_t,
    );
}
extern "C" {
    pub fn rtcIntersectNp(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        rayhit: *const RTCRayHitNp,
        N: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcOccluded1(scene: RTCScene, context: *mut RTCIntersectContext, ray: *mut RTCRay);
}
extern "C" {
    pub fn rtcOccluded4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRay4,
    );
}
extern "C" {
    pub fn rtcOccluded8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRay8,
    );
}
extern "C" {
    pub fn rtcOccluded16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRay16,
    );
}
extern "C" {
    pub fn rtcOccluded1M(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRay,
        M: ::std::os::raw::c_uint,
        byteStride: size_t,
    );
}
extern "C" {
    pub fn rtcOccluded1Mp(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut *mut RTCRay,
        M: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcOccludedNM(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *mut RTCRayN,
        N: ::std::os::raw::c_uint,
        M: ::std::os::raw::c_uint,
        byteStride: size_t,
    );
}
extern "C" {
    pub fn rtcOccludedNp(
        scene: RTCScene,
        context: *mut RTCIntersectContext,
        ray: *const RTCRayNp,
        N: ::std::os::raw::c_uint,
    );
}
#[doc = " collision callback"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCCollision {
    pub geomID0: ::std::os::raw::c_uint,
    pub primID0: ::std::os::raw::c_uint,
    pub geomID1: ::std::os::raw::c_uint,
    pub primID1: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCCollision() {
    assert_eq!(
        ::std::mem::size_of::<RTCCollision>(),
        16usize,
        concat!("Size of: ", stringify!(RTCCollision))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCCollision>(),
        4usize,
        concat!("Alignment of ", stringify!(RTCCollision))
    );
    fn test_field_geomID0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCCollision>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCCollision),
                "::",
                stringify!(geomID0)
            )
        );
    }
    test_field_geomID0();
    fn test_field_primID0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCCollision>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID0) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCCollision),
                "::",
                stringify!(primID0)
            )
        );
    }
    test_field_primID0();
    fn test_field_geomID1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCCollision>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCCollision),
                "::",
                stringify!(geomID1)
            )
        );
    }
    test_field_geomID1();
    fn test_field_primID1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCCollision>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID1) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCCollision),
                "::",
                stringify!(primID1)
            )
        );
    }
    test_field_primID1();
}
pub type RTCCollideFunc = ::std::option::Option<
    unsafe extern "C" fn(
        userPtr: *mut ::std::os::raw::c_void,
        collisions: *mut RTCCollision,
        num_collisions: ::std::os::raw::c_uint,
    ),
>;
extern "C" {
    #[doc = " Performs collision detection of two scenes"]
    pub fn rtcCollide(
        scene0: RTCScene,
        scene1: RTCScene,
        callback: RTCCollideFunc,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBVHTy {
    _unused: [u8; 0],
}
pub type RTCBVH = *mut RTCBVHTy;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCBuildPrimitive {
    pub lower_x: f32,
    pub lower_y: f32,
    pub lower_z: f32,
    pub geomID: ::std::os::raw::c_uint,
    pub upper_x: f32,
    pub upper_y: f32,
    pub upper_z: f32,
    pub primID: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCBuildPrimitive() {
    assert_eq!(
        ::std::mem::size_of::<RTCBuildPrimitive>(),
        32usize,
        concat!("Size of: ", stringify!(RTCBuildPrimitive))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCBuildPrimitive>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCBuildPrimitive))
    );
    fn test_field_lower_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lower_x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildPrimitive),
                "::",
                stringify!(lower_x)
            )
        );
    }
    test_field_lower_x();
    fn test_field_lower_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lower_y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildPrimitive),
                "::",
                stringify!(lower_y)
            )
        );
    }
    test_field_lower_y();
    fn test_field_lower_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lower_z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildPrimitive),
                "::",
                stringify!(lower_z)
            )
        );
    }
    test_field_lower_z();
    fn test_field_geomID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildPrimitive),
                "::",
                stringify!(geomID)
            )
        );
    }
    test_field_geomID();
    fn test_field_upper_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).upper_x) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildPrimitive),
                "::",
                stringify!(upper_x)
            )
        );
    }
    test_field_upper_x();
    fn test_field_upper_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).upper_y) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildPrimitive),
                "::",
                stringify!(upper_y)
            )
        );
    }
    test_field_upper_y();
    fn test_field_upper_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).upper_z) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildPrimitive),
                "::",
                stringify!(upper_z)
            )
        );
    }
    test_field_upper_z();
    fn test_field_primID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildPrimitive>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildPrimitive),
                "::",
                stringify!(primID)
            )
        );
    }
    test_field_primID();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCThreadLocalAllocatorTy {
    _unused: [u8; 0],
}
pub type RTCThreadLocalAllocator = *mut RTCThreadLocalAllocatorTy;
pub type RTCCreateNodeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: RTCThreadLocalAllocator,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RTCSetNodeChildrenFunction = ::std::option::Option<
    unsafe extern "C" fn(
        nodePtr: *mut ::std::os::raw::c_void,
        children: *mut *mut ::std::os::raw::c_void,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub type RTCSetNodeBoundsFunction = ::std::option::Option<
    unsafe extern "C" fn(
        nodePtr: *mut ::std::os::raw::c_void,
        bounds: *mut *const RTCBounds,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub type RTCCreateLeafFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: RTCThreadLocalAllocator,
        primitives: *const RTCBuildPrimitive,
        primitiveCount: size_t,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RTCSplitPrimitiveFunction = ::std::option::Option<
    unsafe extern "C" fn(
        primitive: *const RTCBuildPrimitive,
        dimension: ::std::os::raw::c_uint,
        position: f32,
        leftBounds: *mut RTCBounds,
        rightBounds: *mut RTCBounds,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub const RTC_BUILD_FLAG_NONE: RTCBuildFlags = 0;
pub const RTC_BUILD_FLAG_DYNAMIC: RTCBuildFlags = 1;
pub type RTCBuildFlags = ::std::os::raw::c_uint;
pub const RTC_BUILD_MAX_PRIMITIVES_PER_LEAF: RTCBuildConstants = 32;
pub type RTCBuildConstants = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBuildArguments {
    pub byteSize: size_t,
    pub buildQuality: RTCBuildQuality,
    pub buildFlags: RTCBuildFlags,
    pub maxBranchingFactor: ::std::os::raw::c_uint,
    pub maxDepth: ::std::os::raw::c_uint,
    pub sahBlockSize: ::std::os::raw::c_uint,
    pub minLeafSize: ::std::os::raw::c_uint,
    pub maxLeafSize: ::std::os::raw::c_uint,
    pub traversalCost: f32,
    pub intersectionCost: f32,
    pub bvh: RTCBVH,
    pub primitives: *mut RTCBuildPrimitive,
    pub primitiveCount: size_t,
    pub primitiveArrayCapacity: size_t,
    pub createNode: RTCCreateNodeFunction,
    pub setNodeChildren: RTCSetNodeChildrenFunction,
    pub setNodeBounds: RTCSetNodeBoundsFunction,
    pub createLeaf: RTCCreateLeafFunction,
    pub splitPrimitive: RTCSplitPrimitiveFunction,
    pub buildProgress: RTCProgressMonitorFunction,
    pub userPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RTCBuildArguments() {
    assert_eq!(
        ::std::mem::size_of::<RTCBuildArguments>(),
        136usize,
        concat!("Size of: ", stringify!(RTCBuildArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCBuildArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCBuildArguments))
    );
    fn test_field_byteSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).byteSize) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(byteSize)
            )
        );
    }
    test_field_byteSize();
    fn test_field_buildQuality() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buildQuality) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(buildQuality)
            )
        );
    }
    test_field_buildQuality();
    fn test_field_buildFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buildFlags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(buildFlags)
            )
        );
    }
    test_field_buildFlags();
    fn test_field_maxBranchingFactor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxBranchingFactor) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(maxBranchingFactor)
            )
        );
    }
    test_field_maxBranchingFactor();
    fn test_field_maxDepth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxDepth) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(maxDepth)
            )
        );
    }
    test_field_maxDepth();
    fn test_field_sahBlockSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sahBlockSize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(sahBlockSize)
            )
        );
    }
    test_field_sahBlockSize();
    fn test_field_minLeafSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).minLeafSize) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(minLeafSize)
            )
        );
    }
    test_field_minLeafSize();
    fn test_field_maxLeafSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxLeafSize) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(maxLeafSize)
            )
        );
    }
    test_field_maxLeafSize();
    fn test_field_traversalCost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).traversalCost) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(traversalCost)
            )
        );
    }
    test_field_traversalCost();
    fn test_field_intersectionCost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).intersectionCost) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(intersectionCost)
            )
        );
    }
    test_field_intersectionCost();
    fn test_field_bvh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bvh) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(bvh)
            )
        );
    }
    test_field_bvh();
    fn test_field_primitives() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primitives) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(primitives)
            )
        );
    }
    test_field_primitives();
    fn test_field_primitiveCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primitiveCount) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(primitiveCount)
            )
        );
    }
    test_field_primitiveCount();
    fn test_field_primitiveArrayCapacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).primitiveArrayCapacity) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(primitiveArrayCapacity)
            )
        );
    }
    test_field_primitiveArrayCapacity();
    fn test_field_createNode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).createNode) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(createNode)
            )
        );
    }
    test_field_createNode();
    fn test_field_setNodeChildren() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setNodeChildren) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(setNodeChildren)
            )
        );
    }
    test_field_setNodeChildren();
    fn test_field_setNodeBounds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).setNodeBounds) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(setNodeBounds)
            )
        );
    }
    test_field_setNodeBounds();
    fn test_field_createLeaf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).createLeaf) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(createLeaf)
            )
        );
    }
    test_field_createLeaf();
    fn test_field_splitPrimitive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).splitPrimitive) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(splitPrimitive)
            )
        );
    }
    test_field_splitPrimitive();
    fn test_field_buildProgress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buildProgress) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(buildProgress)
            )
        );
    }
    test_field_buildProgress();
    fn test_field_userPtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RTCBuildArguments>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userPtr) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(RTCBuildArguments),
                "::",
                stringify!(userPtr)
            )
        );
    }
    test_field_userPtr();
}
extern "C" {
    pub fn rtcNewBVH(device: RTCDevice) -> RTCBVH;
}
extern "C" {
    pub fn rtcBuildBVH(args: *const RTCBuildArguments) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcThreadLocalAlloc(
        allocator: RTCThreadLocalAllocator,
        bytes: size_t,
        align: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcRetainBVH(bvh: RTCBVH);
}
extern "C" {
    pub fn rtcReleaseBVH(bvh: RTCBVH);
}
